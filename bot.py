import telebot
import random
import logging
import os
import sys

from database import create_db, add_user, get_all_users, get_user_list
from bot_logic import gen_pass  # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
from bot_logic import orelreshka  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã "–û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞"

create_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')

bot = telebot.TeleBot("7905314753:AAGZL7Ip5KyIpCFOKjTqrQdVymzsPi-sn_I")  # –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMINS = [1199448870]  # –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
ADMIN_PASSWORD = "gydinova0610201"  # –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
kamen = ["ü™® –ö–∞–º–µ–Ω—å", "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", "üìÑ –ë—É–º–∞–≥–∞"]
users = set()  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
calculator_state = {}
admin_access = {}
def create_knb_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        telebot.types.KeyboardButton('ü™® –ö–∞–º–µ–Ω—å'),
        telebot.types.KeyboardButton('‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã'),
        telebot.types.KeyboardButton('üìÑ –ë—É–º–∞–≥–∞'),
        telebot.types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
    )
    return keyboard

def create_calculator_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    buttons = [
        '7', '8', '9', '/',
        '4', '5', '6', '*',
        '1', '2', '3', '-',
        '0', '.', '=', '+',
        'üîô –ù–∞–∑–∞–¥'
    ]
    keyboard.add(*[telebot.types.KeyboardButton(b) for b in buttons])
    return keyboard

def create_keyboard(user_id):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å', 'ü™ô –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞')
    keyboard.add('ü™® –ù–æ–∂–Ω–∏—Ü—ã, –ö–∞–º–µ–Ω—å –∏–ª–∏ –ë—É–º–∞–≥–∞', 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
    if user_id in ADMINS:
        keyboard.add('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    return keyboard

def create_admin_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    keyboard.add("üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üìÇ –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
    keyboard.add("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
    keyboard.add("üîô –ù–∞–∑–∞–¥")
    return keyboard

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.chat.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    add_user(user_id, username, first_name, last_name)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.", reply_markup=create_keyboard(user_id))

@bot.message_handler(func=lambda message: message.text == "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and message.chat.id in ADMINS)
def show_user_count(message):
    count = len(get_all_users())
    bot.reply_to(message, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

@bot.message_handler(func=lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏" and message.chat.id in ADMINS)
def clear_logs(message):
    open(bot.log, "w").close()  # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
    bot.reply_to(message, "üóë –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!", reply_markup=create_admin_keyboard())
    logging.info(f"üóë –õ–æ–≥–∏ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.chat.id}.")

@bot.message_handler(func=lambda message: message.text == '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
def admin_panel(message):
    user_id = message.from_user.id
    if user_id in admin_access and admin_access[user_id]:  # –ï—Å–ª–∏ —É–∂–µ –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å
        bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=create_admin_keyboard())
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, check_admin_password)

def check_admin_password(message):
    user_id = message.from_user.id
    if message.text == ADMIN_PASSWORD:
        admin_access[user_id] = True
        bot.reply_to(message, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=create_admin_keyboard())
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=create_keyboard(user_id))

@bot.message_handler(func=lambda message: message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" and message.chat.id in ADMINS)
def broadcast_start(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(message, send_broadcast)

def send_broadcast(message):
    users = get_all_users()
    success, failed = 0, 0

    for user in users:
        try:
            bot.send_message(user, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}")
            success += 1
        except:
            failed += 1

    bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}")

@bot.message_handler(func=lambda message: message.text == "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and message.chat.id in ADMINS)
def list_users(message):
    users = get_user_list()
    user_text = "\n".join(users)

    if len(user_text) > 4000:
        user_text = user_text[:4000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram

    bot.reply_to(message, f"üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_text}")

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" and message.chat.id in ADMINS)
def restart_bot(message):
    bot.reply_to(message, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...", reply_markup=create_admin_keyboard())
    logging.info(f"üîÑ –ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.chat.id}.")
    os.execl(sys.executable, sys.executable, *sys.argv)

@bot.message_handler(func=lambda message: message.text == 'üìÇ –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏' and message.chat.id in ADMINS)
def get_logs(message):
    if message.from_user.id in ADMINS:
        try:
            with open('bot.log', 'rb') as log_file:
                bot.send_document(message.chat.id, log_file, reply_markup=create_admin_keyboard())
        except FileNotFoundError:
            bot.reply_to(message, "–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=create_admin_keyboard())

@bot.message_handler(func=lambda message: message.text == '‚õî –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞' and message.chat.id in ADMINS)
def shutdown_bot(message):
    if message.from_user.id in ADMINS:
        bot.reply_to(message, "–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...", reply_markup=create_admin_keyboard())
        os._exit(0)

@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def back_to_menu(message):
    bot.reply_to(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=create_keyboard(message.from_user.id))

@bot.message_handler(func=lambda message: message.text == 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
def calculator_start(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=create_calculator_keyboard())
    calculator_state[message.from_user.id] = {'expression': ''}

@bot.message_handler(func=lambda message: message.text in '0123456789+-*/.')
def handle_calculator_input(message):
    user_id = message.from_user.id
    if user_id not in calculator_state:
        return
    calculator_state[user_id]['expression'] += message.text
    bot.reply_to(message, f"–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {calculator_state[user_id]['expression']}", reply_markup=create_calculator_keyboard())

@bot.message_handler(func=lambda message: message.text == '=')
def calculate_result(message):
    user_id = message.from_user.id
    if user_id in calculator_state:
        expression = calculator_state[user_id]['expression']
        try:
            result = eval(expression, {"__builtins__": None}, {})
            bot.reply_to(message, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}", reply_markup=create_calculator_keyboard())
            calculator_state[user_id]['expression'] = ''
        except Exception:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=create_calculator_keyboard())

@bot.message_handler(func=lambda message: message.text == 'üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å')
def ask_password_length(message):
    bot.reply_to(message, "–°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å?", reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_password_length)

def get_password_length(message):
    try:
        length = int(message.text)
        if length <= 0:
            raise ValueError
        password = gen_pass(length)
        bot.reply_to(message, f"–í–∞—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}", reply_markup=create_keyboard(message.from_user.id))
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=create_keyboard(message.from_user.id))

@bot.message_handler(func=lambda message: message.text == 'ü™ô –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞')
def send_or(message):
    result = orelreshka()
    bot.reply_to(message, result, reply_markup=create_keyboard(message.from_user.id))

@bot.message_handler(func=lambda message: message.text == 'ü™® –ù–æ–∂–Ω–∏—Ü—ã, –ö–∞–º–µ–Ω—å –∏–ª–∏ –ë—É–º–∞–≥–∞')
def knb_start(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞.", reply_markup=create_knb_keyboard())
    logging.info(f"User {message.from_user.id} started '–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞'.")

@bot.message_handler(func=lambda message: message.text in ["ü™® –ö–∞–º–µ–Ω—å", "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", "üìÑ –ë—É–º–∞–≥–∞"])
def knb_play(message):
    user_choice = message.text
    bot_choice = random.choice(kamen)
    if user_choice == bot_choice:
        result = f"–ù–∏—á—å—è! –í—ã –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏: {user_choice}"
    elif (user_choice == "ü™® –ö–∞–º–µ–Ω—å" and bot_choice == "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã") or \
         (user_choice == "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã" and bot_choice == "üìÑ –ë—É–º–∞–≥–∞") or \
         (user_choice == "üìÑ –ë—É–º–∞–≥–∞" and bot_choice == "ü™® –ö–∞–º–µ–Ω—å"):
        result = f"–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞! –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}, –ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}"
    else:
        result = f"–ü–æ–±–µ–¥–∞ –±–æ—Ç–∞! –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}, –ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}"
    bot.reply_to(message, result, reply_markup=create_knb_keyboard())
    logging.info(f"User {message.from_user.id} played '–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞'.")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, message.text)
    logging.info(f"User {message.from_user.id} sent message: {message.text}")

bot.infinity_polling()
